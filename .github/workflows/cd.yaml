name: CD

on:
  push:
    branches: [main]

env:
  PORT: 3000
  DOCKER_IMAGE: 'tunatone0111/aif-server'
  DOCKER_CONTAINER: 'aif-server'

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up Docker build
        uses: docker/setup-buildx-action@v2

      - name: Set Dotenv
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
          echo "OSRM_URI=${{ secrets.OSRM_URI }}" >> .env
          cat .env

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove Running Container
        run: |
          ((docker inspect --format '{{.State.Running}}' $containerName 2>$null) -eq "True") -and (docker stop ${{ env.DOCKER_CONTAINER }}) -and (docker rm ${{ env.DOCKER_CONTAINER }})

      - name: Run New Container
        run: |
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
          echo "OSRM_URI=${{ secrets.OSRM_URI }}" >> .env
          cat .env
          docker run -d -p ${{ env.PORT }}:3000 ${{ env.DOCKER_IMAGE }}:latest
